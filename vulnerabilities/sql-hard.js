const express = require('express');
const db = require('../backend/db'); // Importa la conexión a la base de datos
const router = express.Router();

// Endpoint para obtener datos anidados
router.get('/nested-query', (req, res) => {
  const query = `
    SELECT U.Nombre, U.Correo, U.Puntos, PR.Pregunta AS Problema
    FROM Usuario U
    JOIN Problema_Usuario PU ON U.id = PU.id_Usuario
    JOIN Problema PR ON PU.id_Pregunta = PR.id
  `;
  db.all(query, [], (err, rows) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, data: rows });
    }
  });
});

// Endpoint para ejecutar una consulta SQL personalizada
router.post('/execute-custom-query', (req, res) => {
  const { query } = req.body;
  if (!query) {
    return res.status(400).json({ success: false, message: 'Falta la consulta SQL.' });
  }

  db.all(query, (err, rows) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    res.json({ success: true, data: rows });
  });
});

// Endpoint para validar la flag obtenida de consultas anidadas
router.post('/validate-nested-flag', (req, res) => {
  const { userId, flag } = req.body;
  const nestedQuery = `
    SELECT (SELECT COUNT(*) FROM Usuario) AS userCount, (SELECT COUNT(*) FROM Problema) AS problemCount
  `;
  db.get(nestedQuery, [], (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    }
    const expectedFlag = `${row.userCount}-${row.problemCount}`;
    if (flag === expectedFlag) {
      let updateQuery = `UPDATE Usuario SET Puntos = Puntos + 30 WHERE id = ?`;
      db.run(updateQuery, [userId], (updateErr) => {
        if (updateErr) {
          return res.status(500).json({ success: false, message: "Error actualizando puntos", error: updateErr.message });
        }
        res.json({ success: true, message: 'Flag correcta! Puntos actualizados.' });
      });
    } else {
      res.json({ success: false, message: 'Flag incorrecta. Inténtalo de nuevo.' });
    }
  });
});

module.exports = router;
