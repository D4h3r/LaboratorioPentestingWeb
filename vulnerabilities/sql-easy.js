const express = require('express');
const db = require('../backend/db');
const Usuario = require('../models/usuario');

const router = express.Router();

const executeWithRetry = (dbFunction, args, maxRetries, callback) => {
  let attempts = 0;


  // Función para ejecutar la consulta con un manejo de errores y reintentos
  const execute = () => {
    dbFunction(...args, (err, result) => {
      if (err && err.code === 'SQLITE_BUSY' && attempts < maxRetries) {
        attempts++;
        console.log(`Retrying due to SQLITE_BUSY (Attempt ${attempts}/${maxRetries})`);
        setTimeout(execute, 100);
      } else {
        callback(err, result);
      }
    });
  };

  execute();
};

// Ruta para obtener la versión de SQLite
router.get('/sqlite-version', (req, res) => {
  let query = "SELECT sqlite_version() AS version";
  db.get(query, (err, row) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Versión de SQLite', version: row.version });
    }
  });
});


// Ruta para validar la versión de SQLite
router.post('/validate-sqlite-version', (req, res) => {
  const { userId, version } = req.body; // Asegúrate de que userId está presente en el cuerpo de la solicitud
  let query = "SELECT sqlite_version() AS version";
  
  db.get(query, (err, row) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      return res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    }
    
    console.log(`Versión actual de SQLite: ${row.version}`);
    
    if (row.version === version) {
      executeWithRetry(Usuario.updatePointsAndLevels.bind(Usuario), [userId, 20, 'sql-version'], 5, (updateErr) => {
        if (updateErr) {
          console.error('Error actualizando puntos:', updateErr.message);
          return res.status(500).json({ success: false, message: "Error actualizando puntos", error: updateErr.message });
        }
        res.json({ success: true, message: 'Flag correcta! Puntos actualizados y nivel completado.' });
      });
    } else {
      console.log(`Versión proporcionada: ${version} no coincide con la versión actual: ${row.version}`);
      res.json({ success: false, message: 'Flag incorrecta. Inténtalo de nuevo.' });
    }
  });
});



router.post('/execute-sql', (req, res) => {
  const { query } = req.body;
  db.all(query, (err, rows) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, data: rows });
    }
  });
});

router.post('/validate-flag', (req, res) => {
  const { userId, flag } = req.body;
  const query = 'SELECT flag FROM Problema WHERE id = ?'; // Ajusta la consulta según tu esquema
  db.get(query, [5], (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    if (row && row.flag === flag) {
      Usuario.updatePointsAndLevels(userId, 10, 'sql-easy', (updateErr) => {
        if (updateErr) {
          return res.status(500).json({ success: false, message: 'Error actualizando puntos', error: updateErr.message });
        }
        res.json({ success: true, message: 'Flag correcta! Puntos actualizados y nivel completado.' });
      });
    } else {
      res.json({ success: false, message: 'Flag incorrecta. Inténtalo de nuevo.' });
    }
  });
});


router.post('/login', (req, res) => {
  const { correo, password } = req.body;
  let query = `SELECT id, Puntos FROM Usuario WHERE Correo = '${correo}' AND Password = '${password}'`;
  console.log(`Intento de inicio de sesión para el correo: ${correo}`);
  db.get(query, (err, usuario) => {
    if (err) {
      console.error('Error en la base de datos:', err.message);
      return res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    }
    if (usuario) {
      console.log('Usuario encontrado:', usuario);
      if (correo.includes("' OR '1'='1")) {
        executeWithRetry(Usuario.updatePointsAndLevels.bind(Usuario), [usuario.id, 10, 'sql-login'], 5, (updateErr) => {
          if (updateErr) {
            console.error('Error actualizando puntos:', updateErr.message);
            return res.status(500).json({ success: false, message: "Error actualizando puntos", error: updateErr.message });
          }
          res.json({ success: true, message: 'Inicio de sesión exitoso. Puedes avanzar al siguiente nivel.', puntos: usuario.Puntos + 10 });
        });
      } else {
        res.json({ success: true, message: 'Inicio de sesión exitoso, pero no usaste SQL Injection.', puntos: usuario.Puntos });
      }
    } else {
      console.log('Credenciales incorrectas para el correo:', correo);
      res.json({ success: false, message: 'Credenciales incorrectas' });
    }
  });
});

router.get('/user-info', (req, res) => {
  const usuarioId = req.query.id;
  const query = `SELECT Nombre, Correo FROM Usuario WHERE id = '${usuarioId}'`;
  db.all(query, [], (err, usuarios) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, usuarios });
    }
  });
});

router.get('/list-tables', (req, res) => {
  let query = "SELECT name FROM sqlite_master WHERE type='table'";
  db.all(query, (err, tables) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Listado de tablas', tables });
    }
  });
});

router.get('/search-users', (req, res) => {
  let searchTerm = req.query.search;
  let query = `SELECT id, Nombre FROM Usuario WHERE Nombre LIKE '%${searchTerm}%'`;
  db.all(query, (err, usuarios) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Resultados de la búsqueda', usuarios });
    }
  });
});

router.get('/users', (req, res) => {
  let query = `SELECT * FROM Usuario WHERE '1'='1'`;
  db.all(query, (err, rows) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Todos los usuarios', users: rows });
    }
  });
});

router.get('/table-columns', (req, res) => {
  let tableName = req.query.tableName;
  let query = `PRAGMA table_info(${tableName});`;
  db.all(query, (err, columns) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Columnas de la tabla', columns });
    }
  });
});

router.get('/user-profile', (req, res) => {
  let userId = req.query.id;
  let query = `SELECT id, Nombre, Correo, Puntos FROM Usuario WHERE id = ?`;
  db.get(query, [userId], (err, user) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, user: user });
    }
  });
});

module.exports = router;
