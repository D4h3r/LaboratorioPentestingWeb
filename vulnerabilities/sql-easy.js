const express = require('express');
const db = require('../backend/db'); // Importa la conexión a la base de datos
const Usuario = require('../models/usuario');

const router = express.Router();

// SQL Easy Level Endpoints
router.get('/sqlite-version', (req, res) => {
  let query = "SELECT sqlite_version() AS version";
  db.get(query, (err, row) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Versión de SQLite', version: row.version });
    }
  });
});

router.post('/validate-sqlite-version', (req, res) => {
  const { userId, version } = req.body;
  let query = "SELECT sqlite_version() AS version";
  db.get(query, (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    }
    if (row.version === version) {
      let updateQuery = `UPDATE Usuario SET Puntos = Puntos + 20 WHERE id = ?`;
      db.run(updateQuery, [userId], (updateErr) => {
        if (updateErr) {
          return res.status(500).json({ success: false, message: "Error actualizando puntos", error: updateErr.message });
        }
        res.json({ success: true, message: 'Flag correcta! Puntos actualizados.' });
      });
    } else {
      res.json({ success: false, message: 'Flag incorrecta. Inténtalo de nuevo.' });
    }
  });
});

router.post('/execute-sql', (req, res) => {
  const { query } = req.body;
  db.all(query, (err, rows) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, data: rows });
    }
  });
});

// Endpoint vulnerable a inyección SQL para el nivel fácil
router.post('/login', (req, res) => {
  let correo = req.body.correo;
  let password = req.body.password;
  let query = `SELECT id, Puntos FROM Usuario WHERE Correo = '${correo}' AND Password = '${password}'`;
  console.log(`Intento de inicio de sesión para el correo: ${correo}`);
  db.get(query, (err, usuario) => {
    if (err) {
      console.error('Error en la base de datos:', err.message);
      return res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    }
    if (usuario) {
      console.log('Usuario encontrado:', usuario);
      // Verifica si se utilizó una inyección SQL
      if (correo.includes("' OR '1'='1")) {
        // Actualiza los puntos del usuario
        let newPoints = usuario.Puntos + 10; // Asigna puntos al usuario
        let updateQuery = `UPDATE Usuario SET Puntos = ? WHERE id = ?`;
        db.run(updateQuery, [newPoints, usuario.id], (updateErr) => {
          if (updateErr) {
            console.error('Error actualizando puntos:', updateErr.message);
            return res.status(500).json({ success: false, message: "Error actualizando puntos", error: updateErr.message });
          }
          res.json({ success: true, message: 'Inicio de sesión exitoso. Puedes avanzar al siguiente nivel.', puntos: newPoints });
        });
      } else {
        res.json({ success: true, message: 'Inicio de sesión exitoso, pero no usaste SQL Injection.', puntos: usuario.Puntos });
      }
    } else {
      console.log('Credenciales incorrectas para el correo:', correo);
      res.json({ success: false, message: 'Credenciales incorrectas' });
    }
  });
});

// Inyección básica - Endpoint para obtener información de usuario por ID
router.get('/user-info', (req, res) => {
  const usuarioId = req.query.id;
  const query = `SELECT Nombre, Correo FROM Usuario WHERE id = '${usuarioId}'`;
  db.all(query, [], (err, usuarios) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, usuarios });
    }
  });
});

// Endpoint para listar todas las tablas de la base de datos
router.get('/list-tables', (req, res) => {
  let query = "SELECT name FROM sqlite_master WHERE type='table'";
  db.all(query, (err, tables) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Listado de tablas', tables });
    }
  });
});

// Endpoint de búsqueda para el nivel fácil
router.get('/search-users', (req, res) => {
  let searchTerm = req.query.search;
  let query = `SELECT id, Nombre FROM Usuario WHERE Nombre LIKE '%${searchTerm}%'`;
  db.all(query, (err, usuarios) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Resultados de la búsqueda', usuarios });
    }
  });
});

router.get('/users', (req, res) => {
  let query = `SELECT * FROM Usuario WHERE '1'='1'`;
  db.all(query, (err, rows) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Todos los usuarios', users: rows });
    }
  });
});

router.get('/table-columns', (req, res) => {
  let tableName = req.query.tableName; // Parámetro enviado en la consulta
  let query = `PRAGMA table_info(${tableName});`; // CUIDADO: Esto es vulnerable a inyección SQL.
  db.all(query, (err, columns) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Columnas de la tabla', columns });
    }
  });
});

router.get('/user-profile', (req, res) => {
  let userId = req.query.id;
  let query = `SELECT id, Nombre, Correo, Puntos FROM Usuario WHERE id = ?`;
  db.get(query, [userId], (err, user) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, user: user });
    }
  });
});

module.exports = router;
