const express = require('express');
const db = require('../backend/db'); // Ajusta la ruta si es necesario
const Usuario = require('../models/usuario'); // Importa el modelo Usuario
const router = express.Router();

// Endpoint único para ejecutar cualquier consulta SQL
router.post('/execute-sql', (req, res) => {
  const { query } = req.body;

  db.all(query, (err, rows) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, data: rows });
    }
  });
});

// Endpoint para validar la flag y actualizar puntos del usuario
router.post('/validate-flag', (req, res) => {
  const { userId, flag } = req.body;
  const query = 'SELECT flag AS Flag FROM Problema WHERE id = 5'; // Ajusta la consulta según tu esquema
  console.log('Received flag:', flag); // Log la flag recibida

  db.get(query, [], (err, row) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    console.log('Query result:', row); // Log el resultado de la consulta

    if (row && row.Flag === flag) {
      console.log('Flags match. Updating points...');
      Usuario.updatePointsAndLevels(userId, 20, 'sql-medium', (updateErr) => {
        if (updateErr) {
          console.error('Error actualizando puntos:', updateErr.message);
          return res.status(500).json({ success: false, message: 'Error actualizando puntos', error: updateErr.message });
        }
        res.json({ success: true, message: 'Flag correcta! Puntos actualizados y nivel completado.' });
      });
    } else {
      console.log('Flags do not match. Received flag:', flag, 'Expected flag:', row ? row.Flag : 'undefined');
      res.json({ success: false, message: 'Flag incorrecta. Inténtalo de nuevo.' });
    }
  });
});

router.get('/completed-levels/:userId', (req, res) => {
  const { userId } = req.params;
  Usuario.getCompletedLevels(userId, (err, row) => {
    if (err) {
      console.error('Error obteniendo niveles completados:', err.message);
      return res.status(500).json({ success: false, message: 'Error obteniendo niveles completados', error: err.message });
    }
    res.json({ success: true, levels: row.NivelesCompletados ? row.NivelesCompletados.split(',') : [] });
  });
});

module.exports = router;
