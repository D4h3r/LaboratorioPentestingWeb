const express = require('express');
const router = express.Router();
const db = require('../backend/db'); 
const Usuario = require('../models/usuario');
const nodemailer = require('nodemailer'); 
const crypto = require('crypto');


// Configuración de nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'kimetsu3@gmail.com', 
    pass: 'ayxg zudd uqkp nqlq' 
  }
});

// Ruta para recuperación de contraseña
router.post('/forgot-password', (req, res) => {
  const { email } = req.body;
  const query = 'SELECT * FROM Usuario WHERE Correo = ?';
  db.get(query, [email], (err, user) => {
    if (err || !user) {
      console.error('Error en la consulta de usuario:', err ? err.message : 'Usuario no encontrado');
      return res.status(400).json({ success: false, message: 'Usuario no encontrado' });
    }

    const token = crypto.randomBytes(20).toString('hex');
    const tokenExpiry = Date.now() + 3600000; // 1 hora de validez

    const updateQuery = 'UPDATE Usuario SET resetToken = ?, resetTokenExpiry = ? WHERE Correo = ?';
    db.run(updateQuery, [token, tokenExpiry, email], (updateErr) => {
      if (updateErr) {
        console.error('Error al actualizar el token de restablecimiento:', updateErr.message);
        return res.status(500).json({ success: false, message: 'Error al generar el token', error: updateErr.message });
      }

      const mailOptions = {
        from: 'kimetsu3@gmail.com',
        to: email,
        subject: 'Recuperación de contraseña',
        text: `Haga clic en el siguiente enlace para restablecer su contraseña: http://localhost:4200/reset-password/${token}`
      };

      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          console.error('Error al enviar el correo:', error.message);
          return res.status(500).json({ success: false, message: 'Error al enviar el correo', error: error.message });
        }
        console.log(`Email enviado: ${info.response}`); // Agregar un log para verificar el envío de correo
        res.json({ success: true, message: 'Correo enviado con éxito' });
      });
    });
  });
});

// Middleware para verificar si el usuario es administrador
function isAdmin(req, res, next) {
  const userId = req.user.id; // Suponiendo que tienes el id del usuario en req.user
  const query = 'SELECT rol FROM Usuario WHERE id = ?';
  db.get(query, [userId], (err, user) => {
    if (err || !user) {
      return res.status(500).json({ success: false, message: 'Error verificando el rol del usuario' });
    }
    if (user.rol !== 'admin') {
      return res.status(403).json({ success: false, message: 'Acceso denegado' });
    }
    next();
  });
}

// Ruta para actualizar la contraseña
router.post('/reset-password', (req, res) => {
  const { token, password } = req.body;
  const query = 'UPDATE Usuario SET Password = ? WHERE resetToken = ?';
  db.run(query, [password, token], function(err) {
    if (err) {
      console.error('Error al actualizar la contraseña:', err.message);
      return res.status(500).json({ success: false, message: 'Error al actualizar la contraseña' });
    }
    res.json({ success: true, message: 'Contraseña actualizada correctamente' });
  });
});


// Ruta para actualizar la contraseña
router.post('/reset-password', (req, res) => {
  const { token, password } = req.body;
  const hashedPassword = bcrypt.hashSync(password, 10); // Asegúrate de importar y usar bcrypt

  const query = 'UPDATE Usuario SET Password = ?, resetToken = NULL WHERE resetToken = ?';
  db.run(query, [hashedPassword, token], function(err) {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error al actualizar la contraseña', error: err.message });
    }
    res.json({ success: true, message: 'Contraseña actualizada correctamente' });
  });
});



// Ruta para el registro de usuarios
router.post('/register', (req, res) => {
  const { name, email, password, confirmPassword } = req.body;
  
  console.log('Datos recibidos para el registro:', req.body); // Agrega este log
  
  if (password !== confirmPassword) {
    return res.status(400).json({ success: false, message: "Passwords do not match" });
  }
  
  Usuario.create(name, email, password, 0, (err) => {
    if (err) {
      console.error('Error al registrar el usuario:', err.message);
      return res.status(500).json({ success: false, message: "Error al registrar el usuario", error: err.message });
    }
    res.json({ success: true, message: 'Usuario registrado con éxito' });
  });
});


// Ruta para el inicio de sesión
router.post('/login', (req, res) => {
  let correo = req.body.correo;
  let password = req.body.password;

  Usuario.findByEmailAndPassword(correo, password, (err, usuario) => {
    if (err) {
      console.error('Error en la base de datos:', err.message);
      return res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    }
    if (usuario) {
      res.json({ success: true, message: 'Inicio de sesión exitoso', usuario });
    } else {
      res.json({ success: false, message: 'Credenciales incorrectas' });
    }
  });
});



// Ruta para actualizar los niveles completados
router.post('/update-completed-levels', (req, res) => {
  const { userId, level } = req.body;
  Usuario.updatePointsAndLevels(userId, 0, level, (err) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error actualizando niveles completados', error: err.message });
    }
    res.json({ success: true, message: 'Nivel completado actualizado' });
  });
});

// Obtener todos los usuarios
router.get('/admin/users', (req, res) => {
  const query = 'SELECT * FROM Usuario';
  db.all(query, [], (err, rows) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    res.json(rows);
  });
});

// Obtener todos los niveles
router.get('/admin/levels', (req, res) => {
  const query = 'SELECT * FROM Nivel';
  db.all(query, [], (err, rows) => {
    if (err) {
      console.error('Error en la consulta:', err.message);
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    res.json(rows);
  });
});



module.exports = router;
