const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const app = express();
const cors = require('cors');
const port = 3000;

app.use(cors());
app.use(express.json());

const dbPath = path.resolve(__dirname, 'mydatabase.db');

// Crea la base de datos si no existe y la abre
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error(err.message);
    throw err;
  } else {
    console.log('Connected to the SQLite database.');
    db.serialize(() => {
      db.run(`CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                password TEXT
              );`);

      db.run(`CREATE TABLE IF NOT EXISTS guestbook (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                entry TEXT
              );`);

      // Inserta usuarios de ejemplo
      const insertUser = db.prepare(`INSERT INTO users (username, password) VALUES (?, ?)`);
      for (const user of [['admin', 'password'], ['user1', 'userpass1'], ['user2', 'userpass2']]) {
        insertUser.run(user);
      }
      insertUser.finalize();

      // Inserta entradas de ejemplo en el libro de visitas
      const insertEntry = db.prepare(`INSERT INTO guestbook (entry) VALUES (?)`);
      insertEntry.run('Welcome to the guestbook!');
      insertEntry.finalize();
    });
  }
});

app.get('/sql-easy/sqlite-version', (req, res) => {
  let query = "SELECT sqlite_version() AS version";

  db.get(query, (err, row) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Versión de SQLite', version: row.version });
    }
  });
});



// Endpoint vulnerable a inyección SQL para el nivel fácil
app.post('/sql-easy/login', (req, res) => {
  let username = req.body.username;
  let password = req.body.password;
  let query = `SELECT id FROM users WHERE username = '${username}' AND password = '${password}'`;

  console.log(`Intento de inicio de sesión para el usuario: ${username}`);

  db.get(query, (err, row) => {
    if (err) {
      console.error('Error en la base de datos: ', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else if (row) {
      console.log('Usuario encontrado: ', row);
      res.json({ success: true, message: 'Inicio de sesión exitoso', user: row });
    } else {
      console.log('Credenciales incorrectas para el usuario: ', username);
      res.json({ success: false, message: 'Credenciales incorrectas' });
    }
  });
});

// Inyección básica - Endpoint para obtener información de usuario por ID
app.get('/sql-easy/user-info', (req, res) => {
  const userId = req.query.id;
  const query = `SELECT first_name, last_name FROM users WHERE id = '${userId}'`;

  db.all(query, [], (err, users) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, users });
    }
  });
});


// Endpoint para listar todas las tablas de la base de datos
app.get('/sql-easy/list-tables', (req, res) => {
  let query = "SELECT name FROM sqlite_master WHERE type='table'";

  db.all(query, (err, tables) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Listado de tablas', tables });
    }
  });
});

// Endpoint de búsqueda para el nivel fácil
app.get('/sql-easy/search-users', (req, res) => {
  let searchTerm = req.query.search;
  let query = `SELECT id, username FROM users WHERE username LIKE '%${searchTerm}%'`;

  db.all(query, (err, rows) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Resultados de la búsqueda', users: rows });
    }
  });
});

app.get('/sql-easy/users', (req, res) => {
  let query = `SELECT * FROM users WHERE '1'='1'`;

  db.all(query, (err, rows) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Todos los usuarios', users: rows });
    }
  });
});


app.get('/sql-easy/table-columns', (req, res) => {
  let tableName = req.query.tableName; // Parámetro enviado en la consulta
  let query = `PRAGMA table_info(${tableName});`; // CUIDADO: Esto es vulnerable a inyección SQL.

  db.all(query, (err, columns) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Columnas de la tabla', columns });
    }
  });
});










//MEDIUM
// SQL Injection: Nivel Medio
app.post('/sql-medium/login', (req, res) => {
  const username = req.body.username;
  const password = req.body.password;

  // Construcción vulnerable de la consulta
  const query = `SELECT id FROM users WHERE username = '${username}' AND password = '${password}'`;

  db.get(query, (err, user) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error de autenticación", error: err.message });
    } else if (user) {
      res.json({ success: true, message: 'Autenticación exitosa', user: user });
    } else {
      res.json({ success: false, message: 'Autenticación fallida' });
    }
  });
});


app.get('/sql-medium/user-info', (req, res) => {
  const userId = req.query.id; // Vulnerable a SQL Injection
  // Consulta vulnerable a inyección SQL
  const query = "SELECT * FROM users WHERE id = '" + userId + "'";

  db.get(query, (err, user) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else if (user) {
      res.json({ success: true, user });
    } else {
      res.json({ success: false, message: 'No se encontró el usuario' });
    }
  });
});

app.get('/sql-medium/time-based', (req, res) => {
  let user_id = req.query.id;
  // Simulación de vulnerabilidad basada en tiempo
  const query = `SELECT CASE WHEN (SELECT username FROM users WHERE id = ${user_id} AND substr(username,1,1) = 'a') THEN sleep(5) ELSE NULL END`;

  db.get(query, (err, result) => {
    if (err) {
      // Si hay un retraso notable, indica una vulnerabilidad potencial
      res.json({ success: true, message: "La consulta tardó en responder." });
    } else {
      res.json({ success: false, message: "Respuesta rápida." });
    }
  });
});


app.get('/sql-medium/union-based', (req, res) => {
  const searchTerm = req.query.search;
  const query = `SELECT * FROM users WHERE username = '${searchTerm}'`;
  
  db.all(query, [], (err, users) => {
    if (err) {
      res.status(500).send("Error en la base de datos.");
    } else {
      res.json(users);
    }
  });
});



app.post('/sql-medium/login-blind', (req, res) => {
  let { username, password } = req.body;

  username = username.replace(/' OR '1'='1'/g, '');
  password = password.replace(/' OR '1'='1'/g, '');

  const query = `SELECT CASE WHEN EXISTS (SELECT id FROM users WHERE username = '${username}' AND password = '${password}') THEN 1 ELSE sleep(5) END`;

  db.get(query, (err, result) => {
    if (err || !result) {
      res.json({ success: false, message: "Intento de login fallido o demorado." });
    } else {
      res.json({ success: true, message: "Login exitoso instantáneamente." });
    }
  });
});


app.get('/sql-medium/search', (req, res) => {
  const searchTerm = req.query.search;
  // Consulta vulnerable en la funcionalidad de búsqueda
  const query = `SELECT * FROM users WHERE username LIKE '%${searchTerm}%'`;

  db.all(query, (err, users) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta" });
    } else {
      res.json({ success: true, users });
    }
  });
});





// Iniciar el servidor
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
