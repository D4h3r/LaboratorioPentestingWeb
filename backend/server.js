const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const app = express();
const cors = require('cors');
const port = 3000;

app.use(cors());
app.use(express.json());

const dbPath = path.resolve(__dirname, 'mydatabase.db');

// Crea la base de datos si no existe y la abre
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error(err.message);
    throw err;
  } else {
    console.log('Connected to the SQLite database.');
  // Creación de tablas
  db.serialize(() => {
    db.run(`
      CREATE TABLE IF NOT EXISTS Categoria (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        Nombre TEXT NOT NULL,
        Descripcion TEXT
      );
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS Problema (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        Pregunta TEXT NOT NULL,
        Respuesta TEXT NOT NULL,
        Categoria INTEGER NOT NULL,
        Nivel INTEGER NOT NULL,
        FOREIGN KEY (Categoria) REFERENCES Categoria(id)
      );
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS Usuario (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        Nombre TEXT NOT NULL,
        Correo TEXT UNIQUE NOT NULL,
        Password TEXT NOT NULL,
        Nivel INTEGER NOT NULL,
        FechaCreacion DATE NOT NULL DEFAULT CURRENT_DATE
      );
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS Problema_Usuario (
        id_Pregunta INTEGER NOT NULL,
        id_Usuario INTEGER NOT NULL,
        respuesta TEXT,
        FOREIGN KEY (id_Pregunta) REFERENCES Problema(id),
        FOREIGN KEY (id_Usuario) REFERENCES Usuario(id),
        PRIMARY KEY (id_Pregunta, id_Usuario)
      );
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS Curso (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        Nombre TEXT NOT NULL,
        Descripcion TEXT
      );
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS Problema_Curso (
        id_Pregunta INTEGER NOT NULL,
        id_Curso INTEGER NOT NULL,
        FOREIGN KEY (id_Pregunta) REFERENCES Problema(id),
        FOREIGN KEY (id_Curso) REFERENCES Curso(id),
        PRIMARY KEY (id_Pregunta, id_Curso)
      );
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS Usuario_Curso (
        id_Usuario INTEGER NOT NULL,
        id_Curso INTEGER NOT NULL,
        Estado TEXT,
        FechaInicio DATE,
        FechaTermino DATE,
        Puntaje INTEGER,
        FOREIGN KEY (id_Usuario) REFERENCES Usuario(id),
        FOREIGN KEY (id_Curso) REFERENCES Curso(id),
        PRIMARY KEY (id_Usuario, id_Curso)
      );
    `);

    // Insertar ejemplos en la tabla 'Categoria'
    const insertCategorias = db.prepare(`INSERT INTO Categoria (Nombre, Descripcion) VALUES (?, ?)`);
    for (const cat of [['Web', 'Problemas relacionados con la web'], ['Redes', 'Problemas de redes'], ['Criptografía', 'Desafíos de criptografía'], ['Forense', 'Tareas forenses digitales'], ['Reversing', 'Ingeniería inversa']]) {
      insertCategorias.run(cat);
    }
    insertCategorias.finalize();

    // Insertar ejemplos en la tabla 'Problema'
    const insertProblemas = db.prepare(`INSERT INTO Problema (Pregunta, Respuesta, Categoria, Nivel) VALUES (?, ?, ?, ?)`);
    for (let i = 1; i <= 10; i++) {
      insertProblemas.run(`Pregunta ${i}`, `Respuesta ${i}`, i % 5 + 1, i % 3 + 1);
    }
    insertProblemas.finalize();

    // Insertar ejemplos en la tabla 'Curso'
    const insertCursos = db.prepare(`INSERT INTO Curso (Nombre, Descripcion) VALUES (?, ?)`);
    for (let i = 1; i <= 10; i++) {
      insertCursos.run(`Curso ${i}`, `Descripción del curso ${i}`);
    }
    insertCursos.finalize();


    });
  }
});

app.post('/some-endpoint', (req, res) => {
  const { idPregunta, idUsuario } = req.body;
  const queryCheck = `SELECT 1 FROM Problema_Usuario WHERE id_Pregunta = ? AND id_Usuario = ?`;

  db.get(queryCheck, [idPregunta, idUsuario], (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    }
    if (row) {
      return res.status(409).json({ success: false, message: "Ya existe una entrada para este usuario y pregunta" });
    }

    // Aquí insertaríamos el nuevo registro ya que no existe
    const insertQuery = `INSERT INTO Problema_Usuario (id_Pregunta, id_Usuario) VALUES (?, ?)`;
    db.run(insertQuery, [idPregunta, idUsuario], (insertErr) => {
      // Manejo de errores de inserción aquí
    });
  });
});

//login
// Endpoint vulnerable a inyección SQL para el nivel fácil
app.post('/login', (req, res) => {
  let correo = req.body.correo;
  let password = req.body.password;
  // Actualización de la consulta para seleccionar el id y el Nombre
  let query = `SELECT id, Nombre FROM Usuario WHERE Correo = '${correo}' AND Password = '${password}'`;

  console.log(`Intento de inicio de sesión para el correo: ${correo}`);

  db.get(query, (err, usuario) => {
    if (err) {
      console.error('Error en la base de datos: ', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else if (usuario) {
      console.log('Usuario encontrado: ', usuario);
      // La respuesta ahora incluye tanto el id como el Nombre del usuario
      res.json({ success: true, message: 'Inicio de sesión exitoso', usuario: usuario });
    } else {
      console.log('Credenciales incorrectas para el correo: ', correo);
      res.json({ success: false, message: 'Credenciales incorrectas' });
    }
  });
});


app.post('/register', (req, res) => {
  const { nombre, correo, password } = req.body;
  const checkUserQuery = `SELECT * FROM Usuario WHERE Correo = ?`;

  db.get(checkUserQuery, [correo], (checkErr, row) => {
    if (checkErr) {
      res.status(500).json({ success: false, message: "Error al verificar el usuario", error: checkErr.message });
    } else if (row) {
      res.status(409).json({ success: false, message: "El correo ya está en uso" });
    } else {
      const insertUserQuery = `INSERT INTO Usuario (Nombre, Correo, Password) VALUES (?, ?, ?)`;
      db.run(insertUserQuery, [nombre, correo, password], (insertErr) => {
        if (insertErr) {
          res.status(500).json({ success: false, message: "Error al crear el usuario", error: insertErr.message });
        } else {
          res.json({ success: true, message: "Usuario registrado exitosamente" });
        }
      });
    }
  });
});


app.get('/sql-easy/sqlite-version', (req, res) => {
  let query = "SELECT sqlite_version() AS version";

  db.get(query, (err, row) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Versión de SQLite', version: row.version });
    }
  });
});



// Endpoint vulnerable a inyección SQL para el nivel fácil
app.post('/sql-easy/login', (req, res) => {
  let correo = req.body.correo;
  let password = req.body.password;
  let query = `SELECT id FROM Usuario WHERE Correo = '${correo}' AND Password = '${password}'`;

  console.log(`Intento de inicio de sesión para el correo: ${correo}`);

  db.get(query, (err, usuario) => {
    if (err) {
      console.error('Error en la base de datos: ', err.message);
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else if (usuario) {
      console.log('Usuario encontrado: ', usuario);
      res.json({ success: true, message: 'Inicio de sesión exitoso', usuario });
    } else {
      console.log('Credenciales incorrectas para el correo: ', correo);
      res.json({ success: false, message: 'Credenciales incorrectas' });
    }
  });
});

// Inyección básica - Endpoint para obtener información de usuario por ID
app.get('/sql-easy/user-info', (req, res) => {
  const usuarioId = req.query.id;
  const query = `SELECT Nombre, Correo FROM Usuario WHERE id = '${usuarioId}'`;

  db.all(query, [], (err, usuarios) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, usuarios });
    }
  });
});


// Endpoint para listar todas las tablas de la base de datos
app.get('/sql-easy/list-tables', (req, res) => {
  let query = "SELECT name FROM sqlite_master WHERE type='table'";

  db.all(query, (err, tables) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Listado de tablas', tables });
    }
  });
});

// Endpoint de búsqueda para el nivel fácil
app.get('/sql-easy/search-users', (req, res) => {
  let searchTerm = req.query.search;
  let query = `SELECT id, Nombre FROM Usuario WHERE Nombre LIKE '%${searchTerm}%'`;

  db.all(query, (err, usuarios) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Resultados de la búsqueda', usuarios });
    }
  });
});


app.get('/sql-easy/users', (req, res) => {
  let query = `SELECT * FROM Usuario WHERE '1'='1'`;

  db.all(query, (err, rows) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Todos los usuarios', users: rows });
    }
  });
});


app.get('/sql-easy/table-columns', (req, res) => {
  let tableName = req.query.tableName; // Parámetro enviado en la consulta
  let query = `PRAGMA table_info(${tableName});`; // CUIDADO: Esto es vulnerable a inyección SQL.

  db.all(query, (err, columns) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else {
      res.json({ success: true, message: 'Columnas de la tabla', columns });
    }
  });
});










//MEDIUM
// SQL Injection: Nivel Medio
app.post('/sql-medium/login', (req, res) => {
  const username = req.body.username;
  const password = req.body.password;

  // Construcción vulnerable de la consulta
  const query = `SELECT id FROM users WHERE username = '${username}' AND password = '${password}'`;

  db.get(query, (err, user) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error de autenticación", error: err.message });
    } else if (user) {
      res.json({ success: true, message: 'Autenticación exitosa', user: user });
    } else {
      res.json({ success: false, message: 'Autenticación fallida' });
    }
  });
});


app.get('/sql-medium/user-info', (req, res) => {
  const userId = req.query.id; // Vulnerable a SQL Injection
  // Consulta vulnerable a inyección SQL
  const query = "SELECT * FROM users WHERE id = '" + userId + "'";

  db.get(query, (err, user) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta", error: err.message });
    } else if (user) {
      res.json({ success: true, user });
    } else {
      res.json({ success: false, message: 'No se encontró el usuario' });
    }
  });
});

app.get('/sql-medium/time-based', (req, res) => {
  let user_id = req.query.id;
  // Simulación de vulnerabilidad basada en tiempo
  const query = `SELECT CASE WHEN (SELECT username FROM users WHERE id = ${user_id} AND substr(username,1,1) = 'a') THEN sleep(5) ELSE NULL END`;

  db.get(query, (err, result) => {
    if (err) {
      // Si hay un retraso notable, indica una vulnerabilidad potencial
      res.json({ success: true, message: "La consulta tardó en responder." });
    } else {
      res.json({ success: false, message: "Respuesta rápida." });
    }
  });
});


app.get('/sql-medium/union-based', (req, res) => {
  const searchTerm = req.query.search;
  const query = `SELECT * FROM users WHERE username = '${searchTerm}'`;
  
  db.all(query, [], (err, users) => {
    if (err) {
      res.status(500).send("Error en la base de datos.");
    } else {
      res.json(users);
    }
  });
});



app.post('/sql-medium/login-blind', (req, res) => {
  let { username, password } = req.body;

  username = username.replace(/' OR '1'='1'/g, '');
  password = password.replace(/' OR '1'='1'/g, '');

  const query = `SELECT CASE WHEN EXISTS (SELECT id FROM users WHERE username = '${username}' AND password = '${password}') THEN 1 ELSE sleep(5) END`;

  db.get(query, (err, result) => {
    if (err || !result) {
      res.json({ success: false, message: "Intento de login fallido o demorado." });
    } else {
      res.json({ success: true, message: "Login exitoso instantáneamente." });
    }
  });
});


app.get('/sql-medium/search', (req, res) => {
  const searchTerm = req.query.search;
  // Consulta vulnerable en la funcionalidad de búsqueda
  const query = `SELECT * FROM users WHERE username LIKE '%${searchTerm}%'`;

  db.all(query, (err, users) => {
    if (err) {
      res.status(500).json({ success: false, message: "Error en la consulta" });
    } else {
      res.json({ success: true, users });
    }
  });
});





// Iniciar el servidor
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
