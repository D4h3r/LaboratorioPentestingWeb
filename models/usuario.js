const db = require('../backend/db'); // Importa la conexión a la base de datos

const Usuario = {
  createTable: function() {
    db.run(`
      CREATE TABLE IF NOT EXISTS Usuario (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        Nombre TEXT NOT NULL,
        Correo TEXT UNIQUE NOT NULL,
        Password TEXT NOT NULL,
        Nivel INTEGER NOT NULL,
        Puntos INTEGER DEFAULT 0,
        NivelesCompletados TEXT DEFAULT '',
        resetToken TEXT,
        resetTokenExpiry INTEGER,
        FechaCreacion DATE NOT NULL DEFAULT CURRENT_DATE,
        rol TEXT DEFAULT 'usuario'
      )
    `);
  },

  findByEmailAndPassword: function(correo, password, callback) {
    const query = 'SELECT id, nombre, correo, rol FROM Usuario WHERE correo = ? AND password = ?';
    db.get(query, [correo, password], (err, row) => {
      if (err) {
        return callback(err);
      }
      if (row) {
        callback(null, row);
      } else {
        callback(null, null);
      }
    });
  },

  
  findByEmail: function(email, callback) {
    const query = `SELECT * FROM Usuario WHERE Correo = ?`;
    db.get(query, [email], callback);
  },

  create: function(name, email, password, callback) {
    const trimmedEmail = email.trim();
    const role = 'usuario'; // Establecer el rol por defecto a 'usuario'
    const query = `INSERT INTO Usuario (Nombre, Correo, Password, Nivel, rol) VALUES (?, ?, ?, 0, ?)`;
    db.run(query, [name, trimmedEmail, password, role], function(err) {
      if (err) {
        console.error('Error al insertar usuario en la base de datos:', err.message); // Agrega este log
      } else {
        console.log('Usuario insertado con éxito, ID:', this.lastID); // Agrega este log
      }
      if (callback && typeof callback === 'function') {
        callback(err, this.lastID);
      }
    });
  },

  updatePoints: function(userId, points, callback) {
    const query = `UPDATE Usuario SET Puntos = Puntos + ? WHERE id = ?`;
    db.run(query, [points, userId], function(err) {
      callback(err, this.changes);
    });
  },

  getCompletedLevels: function(userId, callback) {
    const query = `SELECT NivelesCompletados FROM Usuario WHERE id = ?`;
    db.get(query, [userId], callback);
  },

  updatePointsAndLevels: function(userId, points, level, callback) {
    this.updatePoints(userId, points, (err) => {
      if (err) {
        return callback(err);
      }
      const selectQuery = `SELECT NivelesCompletados FROM Usuario WHERE id = ?`;
      db.get(selectQuery, [userId], (err, row) => {
        if (err) {
          return callback(err);
        }
        if (row) {  // Añadir esta verificación
          let nivelesCompletados = row.NivelesCompletados ? row.NivelesCompletados.split(',') : [];
          if (!nivelesCompletados.includes(level)) {
            nivelesCompletados.push(level);
          }
          const updateQuery = `UPDATE Usuario SET NivelesCompletados = ? WHERE id = ?`;
          db.run(updateQuery, [nivelesCompletados.join(','), userId], function(err) {
            callback(err);
          });
        } else {
          callback(new Error('Usuario no encontrado'));
        }
      });
    });
  }
};

module.exports = Usuario;
