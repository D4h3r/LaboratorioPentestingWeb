const db = require('../backend/db'); // Importa la conexiÃ³n a la base de datos

const Usuario = {
  createTable: function() {
    db.run(`
      CREATE TABLE IF NOT EXISTS Usuario (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        Nombre TEXT NOT NULL,
        Correo TEXT UNIQUE NOT NULL,
        Password TEXT NOT NULL,
        Nivel INTEGER NOT NULL,
        Puntos INTEGER DEFAULT 0,
        NivelesCompletados TEXT DEFAULT '',
        FechaCreacion DATE NOT NULL DEFAULT CURRENT_DATE
      )
    `);
  },

  findByEmailAndPassword: function(correo, password, callback) {
    const query = `SELECT id, Nombre FROM Usuario WHERE Correo = ? AND Password = ?`;
    db.get(query, [correo, password], callback);
  },

  findByEmail: function(email, callback) {
    const query = `SELECT * FROM Usuario WHERE Correo = ?`;
    db.get(query, [email], callback);
  },

  create: function(name, email, password, level, callback) {
    const query = `INSERT INTO Usuario (Nombre, Correo, Password, Nivel) VALUES (?, ?, ?, ?)`;
    db.run(query, [name, email, password, level], function(err) {
      callback(err, this.lastID);
    });
  },

  updatePoints: function(userId, points, callback) {
    const query = `UPDATE Usuario SET Puntos = Puntos + ? WHERE id = ?`;
    db.run(query, [points, userId], function(err) {
      callback(err, this.changes);
    });
  },

  getCompletedLevels: function(userId, callback) {
    const query = `SELECT NivelesCompletados FROM Usuario WHERE id = ?`;
    db.get(query, [userId], callback);
  },

  updatePointsAndLevels: function(userId, points, level, callback) {
    this.updatePoints(userId, points, (err) => {
      if (err) {
        return callback(err);
      }
      const updateQuery = `UPDATE Usuario SET NivelesCompletados = CASE 
        WHEN NivelesCompletados = '' THEN ? 
        ELSE NivelesCompletados || ',' || ?
        END 
        WHERE id = ?`;
      db.run(updateQuery, [level, level, userId], function(err) {
        callback(err);
      });
    });
  }
};

module.exports = Usuario;
