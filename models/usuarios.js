const express = require('express');
const router = express.Router();
const Usuario = require('../models/usuario'); 
const db = require('../backend/db');


router.get('/completed-levels/:userId', (req, res) => {
  const { userId } = req.params;
  Usuario.getCompletedLevels(userId, (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error obteniendo niveles completados', error: err.message });
    }
    res.json({ success: true, levels: row.NivelesCompletados ? row.NivelesCompletados.split(',') : [] });
  });
});

// Verificar si el usuario ha completado un nivel específico
router.get('/has-completed/:userId/:level', (req, res) => {
  const { userId, level } = req.params;
  Usuario.getCompletedLevels(userId, (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    if (row && row.NivelesCompletados && row.NivelesCompletados.split(',').includes(level)) {
      res.json({ success: true, message: 'Nivel completado' });
    } else {
      res.json({ success: false, message: 'Nivel no completado' });
    }
  });
});


router.put('/update-profile', (req, res) => {
  const { userId, nombre, correo, password } = req.body;

  // Verificar si el correo ya existe para otro usuario
  const query = `SELECT id FROM Usuario WHERE Correo = ? AND id != ?`;
  db.get(query, [correo, userId], (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    if (row) {
      return res.status(409).json({ success: false, message: 'El correo ya existe.' });
    }

    // Actualizar el perfil del usuario
    const updateQuery = `UPDATE Usuario SET Nombre = ?, Correo = ?, Password = ? WHERE id = ?`;
    db.run(updateQuery, [nombre, correo, password, userId], function(err) {
      if (err) {
        return res.status(500).json({ success: false, message: 'Error al actualizar el perfil', error: err.message });
      }
      res.json({ success: true, message: 'Perfil actualizado correctamente' });
    });
  });
});

// Obtener todos los usuarios
router.get('/admin/users', (req, res) => {
  const query = 'SELECT id, Nombre, Correo, NivelesCompletados, Puntos, rol FROM Usuario';
  db.all(query, [], (err, rows) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error obteniendo usuarios', error: err.message });
    }
    res.json({ success: true, users: rows });
  });
});





// Obtener todos los niveles disponibles
router.get('/admin/levels', (req, res) => {
  const query = 'SELECT * FROM Nivel';
  db.all(query, [], (err, rows) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error obteniendo niveles', error: err.message });
    }
    res.json({ success: true, levels: rows });
  });
});

// Asignar nivel completado a un usuario
router.post('/admin/assign-level', (req, res) => {
  const { userId, levelId } = req.body;
  const selectQuery = 'SELECT NivelesCompletados FROM Usuario WHERE id = ?';
  const updateQuery = 'UPDATE Usuario SET NivelesCompletados = ? WHERE id = ?';

  db.get(selectQuery, [userId], (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error obteniendo niveles completados', error: err.message });
    }
    let nivelesCompletados = row.NivelesCompletados ? row.NivelesCompletados.split(',') : [];
    if (!nivelesCompletados.includes(levelId.toString())) {
      nivelesCompletados.push(levelId.toString());
    }
    db.run(updateQuery, [nivelesCompletados.join(','), userId], function(err) {
      if (err) {
        return res.status(500).json({ success: false, message: 'Error asignando nivel', error: err.message });
      }
      res.json({ success: true, message: 'Nivel asignado con éxito' });
    });
  });
});

// Eliminar un usuario por id
router.delete('/admin/users/:id', (req, res) => {
  const { id } = req.params;
  const query = 'DELETE FROM Usuario WHERE id = ?';
  db.run(query, [id], function(err) {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error al eliminar usuario', error: err.message });
    }
    res.json({ success: true, message: 'Usuario eliminado correctamente' });
  });
});



router.put('/admin/users/:id', (req, res) => {
  const { id } = req.params;
  let { Nombre, Correo, NivelesCompletados, Puntos, rol } = req.body;

  // Eliminar espacios en blanco alrededor del correo electrónico
  Correo = Correo.trim();

  // Verificar si el correo ya existe para otro usuario
  const checkQuery = `SELECT id FROM Usuario WHERE Correo = ? AND id != ?`;
  db.get(checkQuery, [Correo, id], (err, row) => {
    if (err) {
      return res.status(500).json({ success: false, message: 'Error en la consulta', error: err.message });
    }
    if (row) {
      return res.status(409).json({ success: false, message: 'El correo ya existe.' });
    }

    // Actualizar el perfil del usuario
    const query = 'UPDATE Usuario SET Nombre = ?, Correo = ?, NivelesCompletados = ?, Puntos = ?, rol = ? WHERE id = ?';
    db.run(query, [Nombre, Correo, NivelesCompletados, Puntos, rol, id], function(err) {
      if (err) {
        return res.status(500).json({ success: false, message: 'Error al actualizar el usuario', error: err.message });
      }
      res.json({ success: true, message: 'Usuario actualizado con éxito' });
    });
  });
});

module.exports = router;