import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent implements OnInit {
  registerForm: FormGroup;
  submitted = false;
  errorMessage = '';

  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {}

  ngOnInit(): void {
    this.registerForm = this.fb.group({
      name: ['', Validators.required],
      correo: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      confirmPassword: ['', Validators.required]
    }, { validator: this.checkPasswords });
  }

  get f() { return this.registerForm.controls; }

  onSubmit(): void {
    this.submitted = true;

    if (this.registerForm.invalid) {
      console.log('Formulario inv치lido');
      return;
    }

    const { name, correo, password, confirmPassword } = this.registerForm.value;

    console.log('Formulario de registro enviado:', this.registerForm.value);
    //redireccion
    this.router.navigate(['/login']);

    const trimmedCorreo = correo.trim();

    this.authService.register(name, trimmedCorreo, password, confirmPassword).subscribe({
      next: (response: any) => {
        console.log('Registro exitoso:', response);
        console.log('Redireccionando a /login...');
        this.router.navigate(['/login']).then(success => {
          if (success) {
            console.log('Redirecci칩n exitosa a /login.');
          } else {
            console.error('Fallo en la redirecci칩n a /login.');
          }
        });
      },
      error: (error: any) => {
        this.errorMessage = error.error.message || 'Ocurri칩 un error durante el registro.';
        console.error('Error durante el registro:', error);
      }
    });
  }

  checkPasswords(group: FormGroup) {
    const pass = group.get('password')?.value;
    const confirmPass = group.get('confirmPassword')?.value;
    return pass === confirmPass ? null : { notSame: true };
  }

  onCancelar(): void {
    this.router.navigate(['/login']);
  }
}
