import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders  } from '@angular/common/http';
import { BehaviorSubject, Observable, tap } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loggedIn = new BehaviorSubject<boolean>(false);
  private currentUserSubject: BehaviorSubject<any>; // Declaración de la variable.


  
  constructor(private http: HttpClient) { 
    this.currentUserSubject = new BehaviorSubject<any>(null);

  }

  

    // Método para verificar si está logueado
    isLoggedIn(): Observable<boolean> {
      return this.loggedIn.asObservable();
    }
  
    // Método para actualizar el estado de logueo
    setLoggedIn(value: boolean): void {
      this.loggedIn.next(value);
    }

    // Base URL for the easy level
    private baseUrlEasy = 'http://localhost:3000/sql-easy';
  
    // Base URL for the medium level
    private baseUrlMedium = 'http://localhost:3000/sql-medium';

    register(name: string, correo: string, password: string): Observable<any> {
      const url = 'http://localhost:3000/register';
      const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
      const body = { name, correo, password };
      return this.http.post(url, body, { headers });
    }
    

    //login
    login(correo: string, password: string): Observable<any> {
      const url = 'http://localhost:3000/login';
      return this.http.post(url, { correo, password }).pipe(
        tap((response: any) => { // Asegúrate de importar 'tap' de 'rxjs/operators'
          if (response.success && response.usuario) {
            this.currentUserSubject.next(response.usuario); // Almacena la información del usuario
            this.setLoggedIn(true); // Actualiza el estado de loggedIn
          }
        })
      );
    }
    

    getCurrentUser(): Observable<any> {
      return this.currentUserSubject.asObservable();
    }
    
    // También puedes hacer un método para obtener directamente el nombre si lo prefieres
    getUserName(): string {
      return this.currentUserSubject.value?.nombre; // Asumiendo que el objeto usuario tiene una propiedad 'nombre'
    }

    // AuthService
    logout(): void {
      this.setLoggedIn(false);
      localStorage.removeItem('token');
        // Handle other cleanup if necessary
    }


//  ################# SQL EASY


  loginEasy(email: string, password: string) {
    const url = 'http://localhost:3000/sql-easy/login';
    return this.http.post(url, { email, password });
  }

  listTablesEasy(): Observable<any> {
    const url = `${this.baseUrlEasy}/list-tables`;
    return this.http.get(url);
  }

  searchUsersEasy(searchTerm: string): Observable<any> {
    const url = `${this.baseUrlEasy}/search-users?search=${searchTerm}`;
    return this.http.get(url);
  }

  getSQLiteVersion(): Observable<any> {
    return this.http.get('http://localhost:3000/sql-easy/sqlite-version');
  }

  getAllUsers(): Observable<any> {
    return this.http.get('http://localhost:3000/sql-easy/users');
  }





// ################# SQL MEDIUM



  loginMedium(username: string, password: string): Observable<any> {
    const url = `${this.baseUrlMedium}/login`;
    return this.http.post(url, { username, password });
  }

  searchUsersMedium(searchTerm: string): Observable<any> {
    const url = `${this.baseUrlMedium}/search-users?search=${encodeURIComponent(searchTerm)}`;
    return this.http.get(url);
  }

  // Add new method to get user info at medium difficulty
  getUserInfoMedium(userId: string): Observable<any> {
    const url = `${this.baseUrlMedium}/user-info?id=${encodeURIComponent(userId)}`;
    return this.http.get(url);
  }

}