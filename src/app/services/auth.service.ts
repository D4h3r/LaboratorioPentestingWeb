import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { tap, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loggedIn = new BehaviorSubject<boolean>(false);
  private currentUserSubject: BehaviorSubject<any>;
  private completedPreviousLevel = new BehaviorSubject<boolean>(false);
  private completedLevels: string[] = [];

  constructor(private http: HttpClient) {
    const storedUser = localStorage.getItem('currentUser');
    this.currentUserSubject = new BehaviorSubject<any>(storedUser ? JSON.parse(storedUser) : null);
  }

  // Método para verificar si está logueado
  isLoggedIn(): Observable<boolean> {
    return this.loggedIn.asObservable();
  }

  // Método para actualizar el estado de logueo
  setLoggedIn(value: boolean): void {
    this.loggedIn.next(value);
  }

  // Método para verificar si se ha completado el nivel anterior
  hasCompletedPreviousLevel(): Observable<boolean> {
    return this.completedPreviousLevel.asObservable();
  }

  // Método para actualizar el estado de finalización del nivel anterior
  setCompletedPreviousLevel(value: boolean): void {
    this.completedPreviousLevel.next(value);
  }

  // Método para obtener los niveles completados
  getCompletedLevels(userId: string): Observable<any> {
    const url = `http://localhost:3000/api/completed-levels/${userId}`;
    return this.http.get(url);
  }

  // Método para agregar un nivel completado
  addCompletedLevel(level: string): void {
    if (!this.completedLevels.includes(level)) {
      this.completedLevels.push(level);
    }
  }

  // Base URL for the easy level
  private baseUrlEasy = 'http://localhost:3000/sql-easy';

  // Base URL for the medium level
  private baseUrlMedium = 'http://localhost:3000/sql-medium';

  register(name: string, email: string, password: string, confirmPassword: string): Observable<any> {
    const url = 'http://localhost:3000/register';
    return this.http.post(url, { name, email, password, confirmPassword }, {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    });
  }

  updateProfile(profileData: any): Observable<any> {
    const userId = this.currentUserSubject.value.id; 
    return this.http.put<any>('http://localhost:3000/api/update-profile', { ...profileData, userId });
  }
  

  // login
  login(correo: string, password: string): Observable<any> {
    const url = 'http://localhost:3000/api/login'; // Asegúrate de que la ruta coincida con la del servidor
    return this.http.post(url, { correo, password }).pipe(
      tap((response: any) => {
        if (response.success && response.usuario) {
          localStorage.setItem('currentUser', JSON.stringify(response.usuario));
          this.currentUserSubject.next(response.usuario); // Almacena la información del usuario
          this.setLoggedIn(true); // Actualiza el estado de loggedIn
        }
      })
    );
  }

  getCurrentUser(): Observable<any> {
    return this.currentUserSubject.asObservable();
  }

  // Método para obtener el nombre del usuario
  getUserName(): string {
    return this.currentUserSubject.value?.nombre;
  }

  // Método de logout
  logout(): void {
    this.setLoggedIn(false);
    localStorage.removeItem('currentUser');
    this.currentUserSubject.next(null);
  }

  // ################# SQL EASY

  loginEasy(email: string, password: string): Observable<any> {
    const url = 'http://localhost:3000/sql-easy/login';
    return this.http.post(url, { email, password });
  }

  listTablesEasy(): Observable<any> {
    const url = `${this.baseUrlEasy}/list-tables`;
    return this.http.get(url);
  }

  searchUsersEasy(searchTerm: string): Observable<any> {
    const url = `${this.baseUrlEasy}/search-users?search=${searchTerm}`;
    return this.http.get(url);
  }

  getSQLiteVersion(): Observable<any> {
    return this.http.get('http://localhost:3000/sql-easy/sqlite-version');
  }

  getAllUsers(): Observable<any> {
    return this.http.get('http://localhost:3000/sql-easy/users');
  }

  // ################# SQL MEDIUM

  loginMedium(username: string, password: string): Observable<any> {
    const url = `${this.baseUrlMedium}/login`;
    return this.http.post(url, { username, password });
  }

  searchUsersMedium(searchTerm: string): Observable<any> {
    const url = `${this.baseUrlMedium}/search-users?search=${encodeURIComponent(searchTerm)}`;
    return this.http.get(url);
  }

  // Add new method to get user info at medium difficulty
  getUserInfoMedium(userId: string): Observable<any> {
    const url = `${this.baseUrlMedium}/user-info?id=${encodeURIComponent(userId)}`;
    return this.http.get(url);
  }
}
