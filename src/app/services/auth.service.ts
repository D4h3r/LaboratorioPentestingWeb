import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { tap, map, catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loggedIn = new BehaviorSubject<boolean>(false);
  private currentUserSubject: BehaviorSubject<any>;
  private completedPreviousLevel = new BehaviorSubject<boolean>(false);
  private completedLevels: string[] = [];

  constructor(private http: HttpClient) {
    const storedUser = localStorage.getItem('currentUser');
    this.currentUserSubject = new BehaviorSubject<any>(storedUser ? JSON.parse(storedUser) : null);
    this.loggedIn.next(!!storedUser);
  }
  
  getCurrentUser(): Observable<any> {
    return this.currentUserSubject.asObservable().pipe(
      map(user => {
        if (user) {
          return user;
        } else {
          // Maneja el caso donde el usuario no est√° definido
          return null;
        }
      })
    );
  }

  get currentUserValue(): any {
    return this.currentUserSubject.value;
  }
  
  isAdmin(): boolean {
    const currentUser = this.currentUserValue;
    console.log('Rol del Usuario:', currentUser?.rol);
    return currentUser && currentUser.rol === 'admin';
  }
  
  
  isLoggedIn(): Observable<boolean> {
    return this.loggedIn.asObservable();
  }

  setLoggedIn(value: boolean): void {
    this.loggedIn.next(value);
  }

  hasCompletedPreviousLevel(): Observable<boolean> {
    return this.completedPreviousLevel.asObservable();
  }

  setCompletedPreviousLevel(value: boolean): void {
    this.completedPreviousLevel.next(value);
  }

  getCompletedLevels(userId: string): Observable<any> {
    const url = `http://localhost:3000/api/completed-levels/${userId}`;
    return this.http.get(url);
  }

  addCompletedLevel(level: string): Observable<any> {
    const userId = this.currentUserSubject.value.id;
    const url = `http://localhost:3000/api/add-completed-level`;
    return this.http.post(url, { userId, level }).pipe(
      tap(() => {
        if (!this.completedLevels.includes(level)) {
          this.completedLevels.push(level);
          this.setCompletedPreviousLevel(true); // Actualiza el estado del nivel anterior completado
        }
      })
    );
  }
  
  private baseUrlEasy = 'http://localhost:3000/sql-easy';
  private baseUrlMedium = 'http://localhost:3000/sql-medium';

  register(name: string, email: string, password: string, confirmPassword: string): Observable<any> {
    const url = 'http://localhost:3000/api/register';
    return this.http.post(url, { name, email, password, confirmPassword }, {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    }).pipe(
      tap(response => {
        console.log('Respuesta del servidor en AuthService:', response)
      })
    );
  }
  
  updateProfile(profileData: any): Observable<any> {
    const userId = this.currentUserSubject.value.id; 
    return this.http.put<any>('http://localhost:3000/api/update-profile', { ...profileData, userId });
  }

  login(correo: string, password: string): Observable<any> {
    const url = 'http://localhost:3000/api/login';
    return this.http.post(url, { correo, password }).pipe(
      tap((response: any) => {
        if (response.success && response.usuario) {
          console.log('Login exitoso:', response); 
          localStorage.setItem('currentUser', JSON.stringify(response.usuario));
          this.currentUserSubject.next(response.usuario);
          this.setLoggedIn(true);
          console.log('Logged in user:', response.usuario);
          console.log('Rol del usuario:', response.usuario.rol);
        }
      })
    );
  }
  
  assignLevel(data: { userId: number, levelId: string }): Observable<any> {
    return this.http.post(`http://localhost:3000/api/admin/assign-level`, data);
  }
  
  

  getAllUsersAdmin(): Observable<any> {
    const url = 'http://localhost:3000/api/admin/users';
    return this.http.get(url);
  }

  updateUser(id: number, user: any): Observable<any> {
    const url = `http://localhost:3000/api/admin/users/${id}`;
    return this.http.put(url, user).pipe(
      catchError(err => {
        console.error('Error updating user:', err);
        return throwError(err);
      })
    );
  }
  
  

  deleteUser(id: number): Observable<any> {
    const url = `http://localhost:3000/api/admin/users/${id}`;
    return this.http.delete(url);
  }

  getAllLevels(): Observable<any> {
    const url = 'http://localhost:3000/api/admin/levels';
    return this.http.get(url);
  }

  createLevel(level: { nombre: string; descripcion: string }): Observable<any> {
    return this.http.post('http://localhost:3000/api/admin/levels', level);
  }

  deleteLevel(id: number): Observable<any> {
    return this.http.delete(`http://localhost:3000/api/admin/levels/${id}`);
  }
  
  forgotPassword(email: string): Observable<any> {
    const url = 'http://localhost:3000/api/forgot-password';
    return this.http.post(url, { email }, {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    });
  }

  


  resetPassword(token: string, password: string): Observable<any> {
    const url = 'http://localhost:3000/api/reset-password';
    return this.http.post(url, { token, password }, {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    });
  }
  
  
  getUserName(): string {
    return this.currentUserSubject.value?.nombre;
  }

  logout(): void {
    this.setLoggedIn(false);
    localStorage.removeItem('currentUser');
    this.currentUserSubject.next(null);
  }

  loginEasy(email: string, password: string): Observable<any> {
    const url = 'http://localhost:3000/sql-easy/login';
    return this.http.post(url, { email, password });
  }

  listTablesEasy(): Observable<any> {
    const url = `${this.baseUrlEasy}/list-tables`;
    return this.http.get(url);
  }

  searchUsersEasy(searchTerm: string): Observable<any> {
    const url = `${this.baseUrlEasy}/search-users?search=${searchTerm}`;
    return this.http.get(url);
  }

  getSQLiteVersion(): Observable<any> {
    return this.http.get('http://localhost:3000/sql-easy/sqlite-version');
  }

  getAllUsers(): Observable<any> {
    return this.http.get('http://localhost:3000/sql-easy/users');
  }

  loginMedium(username: string, password: string): Observable<any> {
    const url = `${this.baseUrlMedium}/login`;
    return this.http.post(url, { username, password });
  }

  searchUsersMedium(searchTerm: string): Observable<any> {
    const url = `${this.baseUrlMedium}/search-users?search=${encodeURIComponent(searchTerm)}`;
    return this.http.get(url);
  }

  getUserInfoMedium(userId: string): Observable<any> {
    const url = `${this.baseUrlMedium}/user-info?id=${encodeURIComponent(userId)}`;
    return this.http.get(url);
  }
}
