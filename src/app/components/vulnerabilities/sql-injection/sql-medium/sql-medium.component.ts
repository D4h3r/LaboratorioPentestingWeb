import { Component } from '@angular/core';
import { AuthService } from '../../../../services/auth.service';

@Component({
  selector: 'app-sql-medium',
  templateUrl: './sql-medium.component.html',
  styleUrls: ['./sql-medium.component.scss']
})
export class SqlMediumComponent {
  searchTerm: string = '';
  userId: string = '';
  searchResults: any[] = [];
  userDetails: any = null;
  errorMessage: string = '';
  username: string = '';
  password: string = '';
  loginMessage: string = '';
  loginResult: string = ''; // Añade esta línea para definir loginResult


  constructor(private authService: AuthService) {}

  performSearchMedium() {
    this.authService.searchUsersMedium(this.searchTerm).subscribe({
      next: (data) => {
        this.searchResults = data.users;
      },
      error: (error) => {
        this.errorMessage = error.message;
      }
    });
  }

  getUserDetails() {
    this.authService.getUserInfoMedium(this.userId).subscribe({
      next: (data: any) => {
        this.userDetails = data.user;
      },
      error: (error: any) => {
        this.errorMessage = error.message;
      }
    });
  }

  // Ejemplo de método en tu componente Angular para manejar el login en el nivel medio
  loginMedium() {
    if (this.validateInput(this.username) && this.validateInput(this.password)) {
      this.authService.loginMedium(this.username, this.password).subscribe({
        next: (response) => {
          this.loginMessage = response.message;
        },
        error: (error) => {
          console.error('Error durante el login', error);
          this.loginMessage = 'Error durante el login';
        }
      });
    } else {
      this.loginMessage = 'Por favor, ingresa sólo caracteres alfanuméricos.';
    }
  }

  // Método de validación sencillo
  validateInput(input: string): boolean {
    return /^[a-zA-Z0-9]+$/.test(input);
  }
}
