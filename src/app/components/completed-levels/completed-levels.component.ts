import { Component, OnInit } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

interface CompletedLevelsResponse {
  success: boolean;
  levels: string[];
}

@Component({
  selector: 'app-completed-levels',
  templateUrl: './completed-levels.component.html',
  styleUrls: ['./completed-levels.component.scss']
})
export class CompletedLevelsComponent implements OnInit {
  completedLevels: string[] = [];

  constructor(private authService: AuthService, private http: HttpClient) { }

  ngOnInit(): void {
    this.authService.getCurrentUser().subscribe(user => {
      if (user && user.id) {
        this.getCompletedLevels(user.id).subscribe((response: CompletedLevelsResponse) => {
          if (response.success) {
            this.completedLevels = response.levels;
          }
        });
      }
    });
  }

  getCompletedLevels(userId: number): Observable<CompletedLevelsResponse> {
    return this.http.get<CompletedLevelsResponse>(`http://localhost:3000/api/completed-levels/${userId}`);
  }

  getLevelTitle(level: string): string {
    const levelTitles: { [key: string]: string } = {
      'sql-easy': 'Inyección SQL fácil',
      'sql-medium': 'Inyección SQL Medio',
      'sql-hard': 'Inyección SQL Difícil',
      'sql-version': 'Inyeccion SQL fácil - Versión SQLite',
    };
    return levelTitles[level] || level;
  }
}




