import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { HttpClient } from '@angular/common/http';
import { AuthService } from '../../../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-xss-medium-frame',
  templateUrl: './xss-medium-frame.component.html',
  styleUrls: ['./xss-medium-frame.component.scss']
})
export class XssMediumFrameComponent implements OnInit {
  payload: string = 'http://localhost:4200/assets/xss-vulnerable-page.html?img=x';
  safeUrl: SafeResourceUrl;
  validationMessage: string = '';
  isLoading = false;
  showPopup = false;

  constructor(
    private route: ActivatedRoute,
    private sanitizer: DomSanitizer,
    private http: HttpClient,
    private authService: AuthService,
    private router: Router
  ) {
    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.payload);
  }

  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      if (params['url']) {
        this.payload = params['url'];
        this.updateUrl();
      }
    });
  }

  updateUrl() {
    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.payload);
    this.validateUrl(this.payload);
  }

  validateUrl(url: string) {
    const doubleQuotePattern = /onerror\s*=\s*"alert\(1\)"/i;
    const singleQuotePattern = /onerror\s*=\s*'alert\(1\)'/i;
    if (doubleQuotePattern.test(url)) {
      this.authService.getCurrentUser().subscribe(user => {
        if (user && user.id) {
          this.isLoading = true;
          this.http.post<any>('http://localhost:3000/api/xss-medium/validate-xss-medium', { userId: user.id, url })
            .subscribe(response => {
              this.isLoading = false;
              if (response.success) {
                this.showPopup = true;
                this.validationMessage = 'Validación exitosa: Intento de XSS detectado con comillas dobles. Nivel completado.';
                setTimeout(() => {
                  this.showPopup = false;
                  this.isLoading = true;
                  setTimeout(() => {
                    this.router.navigate(['/completed-levels']).then(success => {
                      this.isLoading = false;
                      if (success) {
                        console.log('Redirección exitosa a /completed-levels');
                      } else {
                        console.error('Fallo en la redirección a /completed-levels');
                      }
                    });
                  }, 2000);
                }, 2000);
              } else {
                this.validationMessage = 'Error en la validación: Payload incorrecto. Intenta de nuevo.';
              }
            }, error => {
              this.isLoading = false;
              this.validationMessage = 'Error en la solicitud de validación: ' + error.message;
            });
        }
      });
    } else if (singleQuotePattern.test(url)) {
      alert('Payload detectado con comillas simples. Intenta usar comillas dobles.');
      this.validationMessage = 'Payload detectado con comillas simples. Intenta usar comillas dobles.';
    } else {
      this.validationMessage = 'El payload debe contener un script de alerta con onerror.';
    }
  }
}
