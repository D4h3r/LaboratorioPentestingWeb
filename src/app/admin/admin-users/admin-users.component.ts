import { Component, OnInit } from '@angular/core';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-admin-users',
  templateUrl: './admin-users.component.html',
  styleUrls: ['./admin-users.component.scss']
})
export class AdminUsersComponent implements OnInit {
  users: any[] = [];
  nivelesDisponibles: string[] = ['sql-easy', 'sql-version', 'sql-medium', 'sql-hard', 'xss-easy', 'xss-medium', 'xss-hard'];
  errorMessage: string = '';

  constructor(private authService: AuthService) {}

  ngOnInit(): void {
    console.log("AdminUsersComponent initialized");
    this.loadUsers();
  }

  loadUsers(): void {
    console.log("Loading users");
    this.authService.getAllUsersAdmin().subscribe({
      next: (response: any) => {
        console.log("Response received:", response);
        if (Array.isArray(response)) {
          this.users = response;
          this.users.forEach(user => user.isEditing = false);
          console.log("Users loaded:", this.users);
        } else {
          this.errorMessage = 'Error al obtener la lista de usuarios.';
          console.error("Error response:", response);
        }
      },
      error: (err) => {
        console.error("Error fetching users:", err);
        this.errorMessage = 'Error al obtener la lista de usuarios.';
      }
    });
  }

  deleteUser(id: number): void {
    this.authService.deleteUser(id).subscribe({
      next: (response: any) => {
        console.log("Delete response received:", response);
        if (response.success) {
          this.loadUsers();
        } else {
          this.errorMessage = 'Error al eliminar el usuario.';
          console.error("Error deleting user:", response);
        }
      },
      error: (err) => {
        console.error("Error deleting user:", err);
        this.errorMessage = 'Error al eliminar el usuario.';
      }
    });
  }

  startEditing(user: any): void {
    user.isEditing = true;
    user.nivelesCompletadosArray = user.NivelesCompletados ? user.NivelesCompletados.split(',') : [];
  }

  saveUser(user: any): void {
    // Eliminar espacios en blanco alrededor del correo electrÃ³nico
    user.Correo = user.Correo.trim();

    this.authService.updateUser(user.id, user).subscribe({
      next: (response: any) => {
        console.log("Save response received:", response);
        if (response.success) {
          user.isEditing = false;
          this.loadUsers();
        } else {
          this.errorMessage = 'Error al guardar el usuario.';
          console.error("Error saving user:", response);
        }
      },
      error: (err) => {
        if (err.status === 409) {
          this.errorMessage = 'El correo ya existe. Por favor, elige otro.';
        } else {
          this.errorMessage = 'Error al guardar el usuario.';
        }
        console.error("Error saving user:", err);
      }
    });
  }
}
